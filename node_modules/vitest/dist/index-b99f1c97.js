import { g as getCurrentSuite, w as withTimeout, a as getDefaultHookTimeout, b as getState, s as setState, c as suite, t as test, d as describe, i as it, v as vitest, e as vi } from './vi-b258f071.js';
import chai, { assert, should } from 'chai';
import { spies, isMockFunction, spyOn, fn } from './jest-mock.js';
import { c as configDefaults } from './defaults-ac98ff15.js';

const beforeAll = (fn, timeout) => getCurrentSuite().on("beforeAll", withTimeout(fn, timeout ?? getDefaultHookTimeout()));
const afterAll = (fn, timeout) => getCurrentSuite().on("afterAll", withTimeout(fn, timeout ?? getDefaultHookTimeout()));
const beforeEach = (fn, timeout) => getCurrentSuite().on("beforeEach", withTimeout(fn, timeout ?? getDefaultHookTimeout()));
const afterEach = (fn, timeout) => getCurrentSuite().on("afterEach", withTimeout(fn, timeout ?? getDefaultHookTimeout()));

const expect = (value, message) => {
  const { assertionCalls } = getState();
  setState({ assertionCalls: assertionCalls + 1 });
  return chai.expect(value, message);
};
expect.getState = getState;
expect.setState = setState;
Object.assign(expect, chai.expect);

function defineConfig(config) {
  return config;
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  defineConfig: defineConfig,
  suite: suite,
  test: test,
  describe: describe,
  it: it,
  configDefaults: configDefaults,
  beforeAll: beforeAll,
  afterAll: afterAll,
  beforeEach: beforeEach,
  afterEach: afterEach,
  assert: assert,
  should: should,
  chai: chai,
  expect: expect,
  spies: spies,
  isMockFunction: isMockFunction,
  spyOn: spyOn,
  fn: fn,
  vitest: vitest,
  vi: vi
});

export { afterAll as a, beforeAll as b, beforeEach as c, defineConfig as d, afterEach as e, expect as f, index as i };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
