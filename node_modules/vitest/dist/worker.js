import { d as dirname, b as basename, r as resolve } from './index-373b5ce3.js';
import { i as isNodeBuiltin, t as toFilePath, V as ViteNodeRunner, c as createBirpc } from './client-d27bd0a9.js';
import { d as distDir } from './constants-861ea902.js';
import { existsSync, readdirSync } from 'fs';
import { m as isWindows, o as mergeSlashes } from './index-5e0ca99c.js';
import { r as rpc } from './rpc-377d999b.js';
import 'path';
import 'module';
import 'url';
import 'assert';
import 'util';
import 'vm';
import 'tty';
import 'local-pkg';

function normalizeId(id, base) {
  if (base && id.startsWith(base))
    id = `/${id.slice(base.length)}`;
  return id.replace(/^\/@id\/__x00__/, "\0").replace(/^\/@id\//, "").replace(/^__vite-browser-external:/, "").replace(/^node:/, "").replace(/[?&]v=\w+/, "?").replace(/\?$/, "");
}

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
function getObjectType(value) {
  return Object.prototype.toString.apply(value).slice(8, -1);
}
function mockPrototype(spyOn, proto) {
  if (!proto)
    return null;
  const newProto = {};
  const protoDescr = Object.getOwnPropertyDescriptors(proto);
  for (const d in protoDescr) {
    Object.defineProperty(newProto, d, protoDescr[d]);
    if (typeof protoDescr[d].value === "function")
      spyOn(newProto, d).mockImplementation(() => {
      });
  }
  return newProto;
}
const pendingIds = [];
class VitestMocker {
  constructor(options, moduleCache, request) {
    this.options = options;
    this.moduleCache = moduleCache;
    this.callbacks = {};
    this.root = this.options.root;
    this.request = request;
  }
  get mockMap() {
    return this.options.mockMap;
  }
  on(event, cb) {
    var _a;
    (_a = this.callbacks)[event] ?? (_a[event] = []);
    this.callbacks[event].push(cb);
  }
  emit(event, ...args) {
    (this.callbacks[event] ?? []).forEach((fn) => fn(...args));
  }
  getSuiteFilepath() {
    return (__vitest_worker__ == null ? void 0 : __vitest_worker__.filepath) || "global";
  }
  getMocks() {
    const suite = this.getSuiteFilepath();
    const suiteMocks = this.mockMap[suite || ""];
    const globalMocks = this.mockMap.global;
    return __spreadValues(__spreadValues({}, suiteMocks), globalMocks);
  }
  async resolvePath(id, importer) {
    const path = await this.options.resolveId(id, importer);
    return {
      path: normalizeId((path == null ? void 0 : path.id) || id),
      external: (path == null ? void 0 : path.id.includes("/node_modules/")) ? id : null
    };
  }
  async resolveMocks() {
    await Promise.all(pendingIds.map(async (mock) => {
      const { path, external } = await this.resolvePath(mock.id, mock.importer);
      if (mock.type === "unmock")
        this.unmockPath(path);
      if (mock.type === "mock")
        this.mockPath(path, external, mock.factory);
    }));
    pendingIds.length = 0;
  }
  async callFunctionMock(dep, mock) {
    var _a;
    const cacheName = `${dep}__mock`;
    const cached = (_a = this.moduleCache.get(cacheName)) == null ? void 0 : _a.exports;
    if (cached)
      return cached;
    const exports = await mock();
    this.emit("mocked", cacheName, { exports });
    return exports;
  }
  getDependencyMock(dep) {
    return this.getMocks()[this.resolveDependency(dep)];
  }
  resolveDependency(dep) {
    return normalizeId(dep).replace(/^\/@fs\//, isWindows ? "" : "/");
  }
  normalizePath(path) {
    return normalizeId(path.replace(this.root, "")).replace(/^\/@fs\//, isWindows ? "" : "/");
  }
  getFsPath(path, external) {
    if (external)
      return mergeSlashes(`/@fs/${path}`);
    return normalizeId(path.replace(this.root, ""));
  }
  resolveMockPath(mockPath, external) {
    const path = normalizeId(external || mockPath);
    if (external || isNodeBuiltin(mockPath)) {
      const mockDirname = dirname(path);
      const baseFilename = basename(path);
      const mockFolder = resolve(this.root, "__mocks__", mockDirname);
      if (!existsSync(mockFolder))
        return null;
      const files = readdirSync(mockFolder);
      for (const file of files) {
        const [basename2] = file.split(".");
        if (basename2 === baseFilename)
          return resolve(mockFolder, file).replace(this.root, "");
      }
      return null;
    }
    const dir = dirname(path);
    const baseId = basename(path);
    const fullPath = resolve(dir, "__mocks__", baseId);
    return existsSync(fullPath) ? fullPath.replace(this.root, "") : null;
  }
  mockObject(obj) {
    if (!this.spy)
      throw new Error("Internal Vitest error: Spy function is not defined.");
    const type = getObjectType(obj);
    if (Array.isArray(obj))
      return [];
    else if (type !== "Object" && type !== "Module")
      return obj;
    const newObj = __spreadValues({}, obj);
    const proto = mockPrototype(this.spy.spyOn, Object.getPrototypeOf(obj));
    Object.setPrototypeOf(newObj, proto);
    for (const k in obj) {
      newObj[k] = this.mockObject(obj[k]);
      const type2 = getObjectType(obj[k]);
      if (type2.includes("Function") && !obj[k].__isSpy) {
        this.spy.spyOn(newObj, k).mockImplementation(() => {
        });
        Object.defineProperty(newObj[k], "length", { value: 0 });
      }
    }
    return newObj;
  }
  unmockPath(path) {
    var _a;
    const suitefile = this.getSuiteFilepath();
    const fsPath = this.normalizePath(path);
    if ((_a = this.mockMap[suitefile]) == null ? void 0 : _a[fsPath])
      delete this.mockMap[suitefile][fsPath];
  }
  mockPath(path, external, factory) {
    var _a;
    const suitefile = this.getSuiteFilepath();
    const fsPath = this.normalizePath(path);
    (_a = this.mockMap)[suitefile] ?? (_a[suitefile] = {});
    this.mockMap[suitefile][fsPath] = factory || this.resolveMockPath(path, external);
  }
  async importActual(id, importer) {
    const { path, external } = await this.resolvePath(id, importer);
    const fsPath = this.getFsPath(path, external);
    const result = await this.request(fsPath);
    return result;
  }
  async importMock(id, importer) {
    const { path, external } = await this.resolvePath(id, importer);
    let mock = this.getDependencyMock(path);
    if (mock === void 0)
      mock = this.resolveMockPath(path, external);
    if (mock === null) {
      await this.ensureSpy();
      const fsPath = this.getFsPath(path, external);
      const mod = await this.request(fsPath);
      return this.mockObject(mod);
    }
    if (typeof mock === "function")
      return this.callFunctionMock(path, mock);
    return this.requestWithMock(mock);
  }
  async ensureSpy() {
    if (this.spy)
      return;
    this.spy = await this.request(resolve(distDir, "jest-mock.js"));
  }
  async requestWithMock(dep) {
    var _a;
    await this.ensureSpy();
    await this.resolveMocks();
    const mock = this.getDependencyMock(dep);
    if (mock === null) {
      const cacheName = `${dep}__mock`;
      const cache = this.moduleCache.get(cacheName);
      if (cache == null ? void 0 : cache.exports)
        return cache.exports;
      const cacheKey = toFilePath(dep, this.root);
      const mod = ((_a = this.moduleCache.get(cacheKey)) == null ? void 0 : _a.exports) || await this.request(dep);
      const exports = this.mockObject(mod);
      this.emit("mocked", cacheName, { exports });
      return exports;
    }
    if (typeof mock === "function")
      return this.callFunctionMock(dep, mock);
    if (typeof mock === "string")
      dep = mock;
    return this.request(dep);
  }
  queueMock(id, importer, factory) {
    pendingIds.push({ type: "mock", id, importer, factory });
  }
  queueUnmock(id, importer) {
    pendingIds.push({ type: "unmock", id, importer });
  }
  withRequest(request) {
    return new VitestMocker(this.options, this.moduleCache, request);
  }
}

async function executeInViteNode(options) {
  const runner = new VitestRunner(options);
  await runner.executeId("/@vite/env");
  const result = [];
  for (const file of options.files)
    result.push(await runner.executeFile(file));
  return result;
}
class VitestRunner extends ViteNodeRunner {
  constructor(options) {
    super(options);
    this.options = options;
    this.mocker = new VitestMocker(options, this.moduleCache);
  }
  prepareContext(context) {
    const request = context.__vite_ssr_import__;
    const mocker = this.mocker.withRequest(request);
    mocker.on("mocked", (dep, module) => {
      this.setCache(dep, module);
    });
    return Object.assign(context, {
      __vite_ssr_import__: (dep) => mocker.requestWithMock(dep),
      __vite_ssr_dynamic_import__: (dep) => mocker.requestWithMock(dep),
      __vitest_mocker__: mocker
    });
  }
}

let _viteNode;
const moduleCache = new Map();
const mockMap = {};
async function startViteNode(ctx) {
  if (_viteNode)
    return _viteNode;
  const processExit = process.exit;
  process.on("beforeExit", (code) => {
    rpc().onWorkerExit(code);
  });
  process.exit = (code = process.exitCode || 0) => {
    rpc().onWorkerExit(code);
    return processExit(code);
  };
  const { config } = ctx;
  const { run: run2, collect: collect2 } = (await executeInViteNode({
    files: [
      resolve(distDir, "entry.js")
    ],
    fetchModule(id) {
      return rpc().fetch(id);
    },
    resolveId(id, importer) {
      return rpc().resolveId(id, importer);
    },
    moduleCache,
    mockMap,
    interopDefault: config.deps.interopDefault ?? true,
    root: config.root,
    base: config.base
  }))[0];
  _viteNode = { run: run2, collect: collect2 };
  return _viteNode;
}
function init(ctx) {
  process.stdout.write("\0");
  const { config, port } = ctx;
  globalThis.__vitest_worker__ = {
    ctx,
    moduleCache,
    config,
    rpc: createBirpc({}, {
      eventNames: ["onUserConsoleLog", "onFinished", "onCollected", "onWorkerExit"],
      post(v) {
        port.postMessage(v);
      },
      on(fn) {
        port.addListener("message", fn);
      }
    })
  };
  if (ctx.invalidates)
    ctx.invalidates.forEach((i) => moduleCache.delete(i));
  ctx.files.forEach((i) => moduleCache.delete(i));
}
async function collect(ctx) {
  init(ctx);
  const { collect: collect2 } = await startViteNode(ctx);
  return collect2(ctx.files, ctx.config);
}
async function run(ctx) {
  init(ctx);
  const { run: run2 } = await startViteNode(ctx);
  return run2(ctx.files, ctx.config);
}

export { collect, run };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
