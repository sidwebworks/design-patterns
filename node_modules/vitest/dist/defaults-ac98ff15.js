const defaultInclude = ["**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"];
const defaultExclude = ["**/node_modules/**", "**/dist/**", "**/cypress/**", "**/.{idea,git,cache,output,temp}/**"];
const defaultCoverageExcludes = [
  "coverage/**",
  "packages/*/test{,s}/**",
  "**/*.d.ts",
  "cypress/**",
  "test{,s}/**",
  "test{,-*}.{js,cjs,mjs,ts,tsx,jsx}",
  "**/*{.,-}test.{js,cjs,mjs,ts,tsx,jsx}",
  "**/__tests__/**",
  "**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc}.config.{js,cjs,mjs,ts}",
  "**/.{eslint,mocha}rc.{js,cjs}"
];
const coverageConfigDefaults = {
  enabled: false,
  clean: true,
  cleanOnRerun: false,
  reportsDirectory: "./coverage",
  excludeNodeModules: true,
  exclude: defaultCoverageExcludes,
  reporter: ["text", "html"],
  allowExternal: false,
  extension: [".js", ".cjs", ".mjs", ".ts", ".tsx", ".jsx", ".vue", "svelte"]
};
const configDefaults = Object.freeze({
  allowOnly: !process.env.CI,
  watch: !process.env.CI,
  globals: false,
  environment: "node",
  threads: true,
  clearMocks: false,
  restoreMocks: false,
  mockReset: false,
  include: defaultInclude,
  exclude: defaultExclude,
  testTimeout: 5e3,
  hookTimeout: 1e4,
  isolate: true,
  watchIgnore: [/\/node_modules\//, /\/dist\//],
  update: false,
  reporters: [],
  silent: false,
  api: false,
  ui: false,
  uiBase: "/__vitest__/",
  open: true,
  coverage: coverageConfigDefaults
});

export { configDefaults as c };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHMtYWM5OGZmMTUuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZhdWx0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlc29sdmVkQzhPcHRpb25zLCBVc2VyQ29uZmlnIH0gZnJvbSAnLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRJbmNsdWRlID0gWycqKi8qLnt0ZXN0LHNwZWN9LntqcyxtanMsY2pzLHRzLG10cyxjdHMsanN4LHRzeH0nXVxuZXhwb3J0IGNvbnN0IGRlZmF1bHRFeGNsdWRlID0gWycqKi9ub2RlX21vZHVsZXMvKionLCAnKiovZGlzdC8qKicsICcqKi9jeXByZXNzLyoqJywgJyoqLy57aWRlYSxnaXQsY2FjaGUsb3V0cHV0LHRlbXB9LyoqJ11cblxuY29uc3QgZGVmYXVsdENvdmVyYWdlRXhjbHVkZXMgPSBbXG4gICdjb3ZlcmFnZS8qKicsXG4gICdwYWNrYWdlcy8qL3Rlc3R7LHN9LyoqJyxcbiAgJyoqLyouZC50cycsXG4gICdjeXByZXNzLyoqJyxcbiAgJ3Rlc3R7LHN9LyoqJyxcbiAgJ3Rlc3R7LC0qfS57anMsY2pzLG1qcyx0cyx0c3gsanN4fScsXG4gICcqKi8qey4sLX10ZXN0LntqcyxjanMsbWpzLHRzLHRzeCxqc3h9JyxcbiAgJyoqL19fdGVzdHNfXy8qKicsXG4gICcqKi97a2FybWEscm9sbHVwLHdlYnBhY2ssdml0ZSx2aXRlc3QsamVzdCxhdmEsYmFiZWwsbnljfS5jb25maWcue2pzLGNqcyxtanMsdHN9JyxcbiAgJyoqLy57ZXNsaW50LG1vY2hhfXJjLntqcyxjanN9Jyxcbl1cblxuY29uc3QgY292ZXJhZ2VDb25maWdEZWZhdWx0cyA9IHtcbiAgZW5hYmxlZDogZmFsc2UsXG4gIGNsZWFuOiB0cnVlLFxuICBjbGVhbk9uUmVydW46IGZhbHNlLFxuICByZXBvcnRzRGlyZWN0b3J5OiAnLi9jb3ZlcmFnZScsXG4gIGV4Y2x1ZGVOb2RlTW9kdWxlczogdHJ1ZSxcbiAgZXhjbHVkZTogZGVmYXVsdENvdmVyYWdlRXhjbHVkZXMsXG4gIHJlcG9ydGVyOiBbJ3RleHQnLCAnaHRtbCddLFxuICBhbGxvd0V4dGVybmFsOiBmYWxzZSxcbiAgLy8gZGVmYXVsdCBleHRlbnNpb25zIHVzZWQgYnkgYzgsIHBsdXMgJy52dWUnIGFuZCAnLnN2ZWx0ZSdcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pc3RhbmJ1bGpzL3NjaGVtYS9ibG9iL21hc3Rlci9kZWZhdWx0LWV4dGVuc2lvbi5qc1xuICBleHRlbnNpb246IFsnLmpzJywgJy5janMnLCAnLm1qcycsICcudHMnLCAnLnRzeCcsICcuanN4JywgJy52dWUnLCAnc3ZlbHRlJ10sXG59IGFzIFJlc29sdmVkQzhPcHRpb25zXG5cbmV4cG9ydCBjb25zdCBjb25maWdEZWZhdWx0czogVXNlckNvbmZpZyA9IE9iamVjdC5mcmVlemUoe1xuICBhbGxvd09ubHk6ICFwcm9jZXNzLmVudi5DSSxcbiAgd2F0Y2g6ICFwcm9jZXNzLmVudi5DSSxcbiAgZ2xvYmFsczogZmFsc2UsXG4gIGVudmlyb25tZW50OiAnbm9kZScsXG4gIHRocmVhZHM6IHRydWUsXG4gIGNsZWFyTW9ja3M6IGZhbHNlLFxuICByZXN0b3JlTW9ja3M6IGZhbHNlLFxuICBtb2NrUmVzZXQ6IGZhbHNlLFxuICBpbmNsdWRlOiBkZWZhdWx0SW5jbHVkZSxcbiAgZXhjbHVkZTogZGVmYXVsdEV4Y2x1ZGUsXG4gIHRlc3RUaW1lb3V0OiA1MDAwLFxuICBob29rVGltZW91dDogMTAwMDAsXG4gIGlzb2xhdGU6IHRydWUsXG4gIHdhdGNoSWdub3JlOiBbL1xcL25vZGVfbW9kdWxlc1xcLy8sIC9cXC9kaXN0XFwvL10sXG4gIHVwZGF0ZTogZmFsc2UsXG4gIHJlcG9ydGVyczogW10sXG4gIHNpbGVudDogZmFsc2UsXG4gIGFwaTogZmFsc2UsXG4gIHVpOiBmYWxzZSxcbiAgdWlCYXNlOiAnL19fdml0ZXN0X18vJyxcbiAgb3BlbjogdHJ1ZSxcbiAgY292ZXJhZ2U6IGNvdmVyYWdlQ29uZmlnRGVmYXVsdHMsXG59KVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFPLE1BQU0sY0FBYyxHQUFHLENBQUMsa0RBQWtELENBQUMsQ0FBQztBQUM1RSxNQUFNLGNBQWMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUscUNBQXFDLENBQUMsQ0FBQztBQUMzSCxNQUFNLHVCQUF1QixHQUFHO0FBQ2hDLEVBQUUsYUFBYTtBQUNmLEVBQUUsd0JBQXdCO0FBQzFCLEVBQUUsV0FBVztBQUNiLEVBQUUsWUFBWTtBQUNkLEVBQUUsYUFBYTtBQUNmLEVBQUUsbUNBQW1DO0FBQ3JDLEVBQUUsdUNBQXVDO0FBQ3pDLEVBQUUsaUJBQWlCO0FBQ25CLEVBQUUsaUZBQWlGO0FBQ25GLEVBQUUsK0JBQStCO0FBQ2pDLENBQUMsQ0FBQztBQUNGLE1BQU0sc0JBQXNCLEdBQUc7QUFDL0IsRUFBRSxPQUFPLEVBQUUsS0FBSztBQUNoQixFQUFFLEtBQUssRUFBRSxJQUFJO0FBQ2IsRUFBRSxZQUFZLEVBQUUsS0FBSztBQUNyQixFQUFFLGdCQUFnQixFQUFFLFlBQVk7QUFDaEMsRUFBRSxrQkFBa0IsRUFBRSxJQUFJO0FBQzFCLEVBQUUsT0FBTyxFQUFFLHVCQUF1QjtBQUNsQyxFQUFFLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7QUFDNUIsRUFBRSxhQUFhLEVBQUUsS0FBSztBQUN0QixFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBQ1UsTUFBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM1QyxFQUFFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUM1QixFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN4QixFQUFFLE9BQU8sRUFBRSxLQUFLO0FBQ2hCLEVBQUUsV0FBVyxFQUFFLE1BQU07QUFDckIsRUFBRSxPQUFPLEVBQUUsSUFBSTtBQUNmLEVBQUUsVUFBVSxFQUFFLEtBQUs7QUFDbkIsRUFBRSxZQUFZLEVBQUUsS0FBSztBQUNyQixFQUFFLFNBQVMsRUFBRSxLQUFLO0FBQ2xCLEVBQUUsT0FBTyxFQUFFLGNBQWM7QUFDekIsRUFBRSxPQUFPLEVBQUUsY0FBYztBQUN6QixFQUFFLFdBQVcsRUFBRSxHQUFHO0FBQ2xCLEVBQUUsV0FBVyxFQUFFLEdBQUc7QUFDbEIsRUFBRSxPQUFPLEVBQUUsSUFBSTtBQUNmLEVBQUUsV0FBVyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDO0FBQy9DLEVBQUUsTUFBTSxFQUFFLEtBQUs7QUFDZixFQUFFLFNBQVMsRUFBRSxFQUFFO0FBQ2YsRUFBRSxNQUFNLEVBQUUsS0FBSztBQUNmLEVBQUUsR0FBRyxFQUFFLEtBQUs7QUFDWixFQUFFLEVBQUUsRUFBRSxLQUFLO0FBQ1gsRUFBRSxNQUFNLEVBQUUsY0FBYztBQUN4QixFQUFFLElBQUksRUFBRSxJQUFJO0FBQ1osRUFBRSxRQUFRLEVBQUUsc0JBQXNCO0FBQ2xDLENBQUM7OyJ9
